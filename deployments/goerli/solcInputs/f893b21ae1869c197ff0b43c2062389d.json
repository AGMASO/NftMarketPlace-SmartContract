{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.8;\r\n\r\n/**\r\n * !Contrato para crear NFTMarketPlace\r\n */\r\n\r\n/**\r\n * !Orden ideal para contratos de solidity por convencion\r\n * *Pragma, Imports,Errors, Interfaces, Libraries, NatSPEC antes de -->Contracts\r\n */\r\n\r\n//IMPORTS\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n//Importamos contrato de oppenzepelin para protegernos de REENTRANCY ATTACKS\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n//ERRORS\r\nerror MarketPlace_PriceMustBeGreaterThan0();\r\nerror MarketPlace_NotApprovedForMarketPlace();\r\nerror MarketPlace_AlreadyListed(address nftAddress, uint256 tokenId);\r\nerror MarketPlace_NotOwner();\r\nerror MarketPlace_NotListed(address nftAddress, uint256 tokenId);\r\nerror MarketPlace_PriceNotMet(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    uint256 price\r\n);\r\nerror MarketPlace_PriceMustBeAboveZero();\r\nerror MarketPlace_NoProceeds();\r\nerror MarketPlace_TransferFailed();\r\n\r\ncontract NftMarketplace is ReentrancyGuard {\r\n    //TYPES\r\n\r\n    struct Listing {\r\n        uint256 price;\r\n        address seller;\r\n    }\r\n    //EVENTS\r\n    event ItemListing(\r\n        address seller,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n    event UpdateListing(\r\n        address seller,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    );\r\n    event ItemBought(\r\n        address indexed buyer,\r\n        address indexed nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemCanceled(\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 tokenId\r\n    );\r\n\r\n    //MAPPINGS\r\n    //Crearemos un mapping que junta NFT Contract address -> Nft TokenID -> Listing(un tipo de struct)\r\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\r\n\r\n    //Creamos otro mapa para trackear la cantidad de dienro que el vendedor del nft ha acumulado\r\n    //Haremos que cada vez que alguien compre un Item con la function buyItem, se actualice el mapping\r\n    mapping(address => uint256) private s_proceeds;\r\n\r\n    ///\r\n    //MODIFIER\r\n    ///\r\n    //Crearemos un Modifier para asegurarnos de que no se listan Nfts que ya se listaron anteriormente\r\n\r\n    modifier notListed(\r\n        address nftAddress,\r\n        address owner,\r\n        uint256 tokenId\r\n    ) {\r\n        Listing memory listingListed = s_listings[nftAddress][tokenId];\r\n\r\n        if (listingListed.price > 0) {\r\n            revert MarketPlace_AlreadyListed(nftAddress, tokenId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * *Creamos otro modifier para que solo el owner pueda listar sus nfts.\r\n     */\r\n\r\n    modifier isOwner(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        address spender\r\n    ) {\r\n        IERC721 nft = IERC721(nftAddress);\r\n        address owner = nft.ownerOf(tokenId);\r\n        if (spender != owner) {\r\n            revert MarketPlace_NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * * Creamos modifier para ver si esta listado el Nft\r\n     */\r\n\r\n    modifier isListed(address nftAddress, uint256 tokenId) {\r\n        Listing memory listingAlreadyListed = s_listings[nftAddress][tokenId];\r\n\r\n        if (listingAlreadyListed.price <= 0) {\r\n            revert MarketPlace_NotListed(nftAddress, tokenId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    //STATE VARIABLES\r\n\r\n    //////////////////\r\n    //Main FUnctions//\r\n    //////////////////\r\n\r\n    /*\r\n     * @notice Method for listing NFT\r\n     * @param nftAddress Address of NFT contract\r\n     * @param tokenId Token ID of NFT\r\n     * @param price sale price for each item\r\n     */\r\n\r\n    function listItems(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    )\r\n        external\r\n        notListed(nftAddress, msg.sender, tokenId)\r\n        isOwner(nftAddress, tokenId, msg.sender)\r\n    {\r\n        if (price <= 0) {\r\n            revert MarketPlace_PriceMustBeGreaterThan0();\r\n        }\r\n        //¿Cómo hacemos para listar los NFTS en nuestro marketPlace?\r\n        //Opcion 1: Enviar el NFT directamente al Contrato que será nuestro marketplace. Usamos la function implicita Transfer\r\n        // Esto no es práctico, porque el owner pierde su Nft y ademas los gastos en gas son altos.\r\n\r\n        //Opcion2: Solamente le damos al contrato del Marketplace el Approval para vender el NFT si alguien lo quisiera.\r\n        //Esta opción es óptima porque el Owner mantiene su nft en todo momento. Además no se gasta gas.\r\n\r\n        IERC721 nft = IERC721(nftAddress);\r\n        //Creamos una instancia de un nuevo Nft gracias a la Interface. Este Interface nft tiene la address del Nft que queremos\r\n        //listar.\r\n        //Luego usamos la function getApproved para aprobar el contrato, y si no es igual a la address de nuestro contrato\r\n        //Que salte un error\r\n        if (nft.getApproved(tokenId) != address(this)) {\r\n            revert MarketPlace_NotApprovedForMarketPlace();\r\n        }\r\n        //¿Como vamos a ordenar los Items?¿Array o mapping? mejor usamos mapping. Va aser mas apropiado\r\n        //Vamos a Update el mappig creado\r\n\r\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\r\n        //Cuando update mapping lo que hay que hacer es emit un event. Ademas nos ayudara para el frontEnd\r\n\r\n        emit ItemListing(msg.sender, nftAddress, tokenId, price);\r\n    }\r\n\r\n    /**END */\r\n\r\n    /*\r\n     * @notice Method for buying listing\r\n     * @notice The owner of an NFT could unapprove the marketplace,\r\n     * which would cause this function to fail\r\n     * Ideally you'd also have a `createOffer` functionality.\r\n     * @param nftAddress Address of NFT contract\r\n     * @param tokenId Token ID of NFT\r\n     */\r\n\r\n    function buyItem(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    ) external payable nonReentrant isListed(nftAddress, tokenId) {\r\n        //La primera cosa que debemos controlar, es si el nft que queremos comprar esta listado o no. Para ello creamos otro\r\n        //Modifier que será isListed.\r\n\r\n        //Mapeamos para sacar los detalles de cada Nft listed\r\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\r\n\r\n        //Una vez sacado el precio al que ha listado el Nft en nuestro contrato marketPlace, debemos hacer la logica\r\n        //para cuando el precio no llega para compar el nft por el cliente\r\n\r\n        if (msg.value < listedItem.price) {\r\n            revert MarketPlace_PriceNotMet(\r\n                nftAddress,\r\n                tokenId,\r\n                listedItem.price\r\n            ); //podemos ver que nft address y token no se pudo vender y el precio del comprador\r\n        }\r\n\r\n        //!Nota que no enviamos el dinero directametne al vendedor. Esto es un procedimiento comun en ETH para abolir el riesgo\r\n        //! de cometer errores enviando el dinero. Para ello se deja que el cliente se lleve el riesgo , ejecutando el mismo\r\n        //! la function withdraw del contrato marketPlace\r\n        //Cada vez que se compre un Item se actualiza el mapping de ingresos o s_proceeds\r\n        //! Muy importante para evitar REENTRACY Hacks, actualizar el mapping antes del withdraw\r\n\r\n        s_proceeds[listedItem.seller] =\r\n            s_proceeds[listedItem.seller] +\r\n            msg.value;\r\n        //Borramos el Item de la lista. Para ello borramos el mapping;\r\n        delete (s_listings[nftAddress][tokenId]);\r\n\r\n        //Finalmente usamos la function SAFEtransferFrom interna de IERC721 para enviar el nft al nuevo owner\r\n        //! USamos safe transfer porque nos saltara error  antes de perder el nft por cualquier cosa erronea durante el proceso\r\n        //!SIempre meter el contrato externo de withdraw, transfer,etc.. al final del todo para evitar hacks\r\n        IERC721(nftAddress).safeTransferFrom(\r\n            listedItem.seller,\r\n            msg.sender,\r\n            tokenId\r\n        );\r\n\r\n        //Debemos chequear que el nft se ha transferido satisfactoriamente\r\n\r\n        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\r\n    }\r\n\r\n    /**END */\r\n\r\n    /*\r\n     * @notice Method for cancelling listing\r\n     * @param nftAddress Address of NFT contract\r\n     * @param tokenId Token ID of NFT\r\n     * @notice isOwner and isListed para comprobar de primeras que solo se pueda ejecutar si esta listado y es el owner\r\n     */\r\n\r\n    function cancelListing(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        isOwner(nftAddress, tokenId, msg.sender)\r\n        isListed(nftAddress, tokenId)\r\n    {\r\n        //Simplemnete borrar el mapping correspondietne a este nft y emitir evento\r\n        delete (s_listings[nftAddress][tokenId]);\r\n\r\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\r\n    }\r\n\r\n    /**\r\n     * END\r\n     */\r\n\r\n    /*\r\n     * @notice Method for updating listing\r\n     * @param nftAddress Address of NFT contract\r\n     * @param tokenId Token ID of NFT\r\n     * @param newPrice Price in Wei of the item\r\n     */\r\n\r\n    function updateListing(\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    )\r\n        external\r\n        nonReentrant\r\n        isOwner(nftAddress, tokenId, msg.sender)\r\n        isListed(nftAddress, tokenId)\r\n    {\r\n        //SImplemnete sacamos del mapping el price antiguo y le asignamos el nuevo price, en este caso llamado newPrice\r\n        //Emitimos el evento de ItemListed ya que es estamos listando de nuevo un nft\r\n        if (newPrice <= 0) {\r\n            revert MarketPlace_PriceMustBeAboveZero();\r\n        }\r\n\r\n        s_listings[nftAddress][tokenId].price = newPrice;\r\n\r\n        //!Usamos el evento ItemListing, usado anteriormetne, porque al final,  update un nft es similar a listar de nuevo\r\n        //! el nft\r\n\r\n        emit UpdateListing(msg.sender, nftAddress, tokenId, newPrice);\r\n    }\r\n\r\n    /**END */\r\n    /*\r\n     * @notice Method for withdrawing proceeds from sales\r\n     */\r\n    function withdrawProceeds() external nonReentrant {\r\n        //localizamos los proceeds con el mapping que creamos para ello\r\n        uint256 proceeds = s_proceeds[msg.sender];\r\n\r\n        if (proceeds <= 0) {\r\n            revert MarketPlace_NoProceeds();\r\n        }\r\n        //si es mayor de 0, reseteamos el mapping primero para evitar hacks\r\n        s_proceeds[msg.sender] = 0;\r\n\r\n        //ejecutamos el metodo de pago\r\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\r\n        if (!success) {\r\n            revert MarketPlace_TransferFailed();\r\n        }\r\n    }\r\n\r\n    /**END */\r\n\r\n    ///GET FUNCTIONS///\r\n\r\n    function getListing(\r\n        address nftAddress,\r\n        uint256 tokenId\r\n    ) external view returns (Listing memory) {\r\n        return s_listings[nftAddress][tokenId];\r\n    }\r\n\r\n    function getProceeds(address seller) external view returns (uint256) {\r\n        return s_proceeds[seller];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}